<?php
/**
 * src/IcyData/NHL/Client.php
 *
 * @package    icydata/php-nhl-api
 * @author     William Lang <william@icydata.hockey>
 * @link       https://github.com/williamlang/php-nhl-api
 */

namespace IcyData\NHL;

use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\MessageFormatter;
use GuzzleHttp\Middleware;
use GuzzleHttp\Psr7\Request as GuzzleRequest;
use GuzzleHttp\Psr7\Response as GuzzleResponse;
use IcyData\NHL\Resource\Conferences;
use IcyData\NHL\Resource\Divisions;
use IcyData\NHL\Resource\Teams;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;

/**
 * NHL Client class for communicating with NHL API
 *
 * @author William Lang <william@icydata.hockey>
 */
class Client {

    /**
     * Base URL for NHL API
     */
    const BASE_URL = 'https://statsapi.web.nhl.com/api/';

    /**
     * Timeout connection time. Default DNS timeout is 5 seconds
     *
     * @var integer
     */
    const CONNECT_TIMEOUT = 5;

    /**
     * Individual request timeout
     *
     * @var integer
     */
    const REQUEST_TIMEOUT = 60;

    /**
     * Guzzle Client
     *
     * @var GuzzleClient
     */
    private $client;

    /**
     * Version of the TSM API to hit
     *
     * @var string
     */
    private $version = 'v1';

    /**
     * Conferences Resource
     *
     * @var Conferences
     */
    public $conferences;

    /**
     * Divisions Resource
     *
     * @var Divisions
     */
    public $divisions;

    /**
     * Teams Resource
     *
     * @var Teams
     */
    public $teams;

    /**
     * Client constructor
     *
     * @param LoggerInterface $logger
     */
    public function __construct(LoggerInterface $logger = null) {
        $this->logger = empty($logger) ? new NullLogger() : $logger;

        $stack = HandlerStack::create();
        $stack->push(Middleware::log($this->logger, new MessageFormatter()));
        $this->guzzle = new GuzzleClient([
            'connect_timeout' => self::CONNECT_TIMEOUT,
            'request_timeout' => self::REQUEST_TIMEOUT,
            'base_uri'        => self::BASE_URL,
            'handler'         => $stack
        ]);

        // resources here
        $this->conferences = new Conferences($this);
        $this->divisions = new Divisions($this);
        $this->teams = new Teams($this);
    }

    /**
     * Return the Guzzle object
     *
     * @return GuzzleInterface
     */
    public function getGuzzle() {
        return $this->guzzle;
    }

    /**
     * Set the Guzzle object
     *
     * @param ClientInterface $guzzle
     * @return void
     */
    public function setGuzzle(ClientInterface $guzzle) {
        $this->guzzle = $guzzle;
    }

    /**
     * The version of the API we're using
     *
     * @return string
     */
    public function getVersion() {
        return $this->version;
    }

    /**
     * Use a specific NHL API version
     *
     * Caution: Can break functionality
     *
     * @param string $version
     * @return void
     */
    public function setVersion($version) {
        $this->version = $version;
    }
}
